    public static class {{ModelTypeName}}DictionaryMappingExtensions
    {
        public static void PopulateFromDictionary(this {{ModelTypeName}} instance, IDictionary<string, object?> dictionary)
        {
            {{#Properties}}
            // {{PropertyName}}
            {{#PropertyIsAssignable}}
            if (dictionary.TryGetValue("{{PropertyName}}", out var {{PropertyName}}_Boxed))
                {{#PropertyIsNotNull}}
                if ({{PropertyName}}_Boxed is not null) instance.{{PropertyName}} = ({{PropertyTypeSyntax}}){{PropertyName}}_Boxed;
                else throw new ArgumentException("The value for the key '{{PropertyName}}' in the supplied dictionary is null", nameof(dictionary));
                {{/PropertyIsNotNull}}
                {{#PropertyIsNullable}}
                instance.{{PropertyName}} = ({{PropertyTypeSyntax}}){{PropertyName}}_Boxed;
                {{/PropertyIsNullable}}
            {{#PropertyIsNotNull}}
            else throw new KeyNotFoundException("The key '{{PropertyName}}' was not present in the supplied dictionary");
            {{/PropertyIsNotNull}}
            {{#PropertyIsNullable}}
            else instance.{{PropertyName}} = null;
            {{/PropertyIsNullable}}
            {{/PropertyIsAssignable}}
            {{/Properties}}
        }

        public static IDictionary<string, object?> ToDictionary(this {{ModelTypeName}} instance)
        {
            var dictionary = new Dictionary<string, object?>
            {
                {{#Configuration.Record.ParameterList}}
                ["{{PropertyName}}"] = instance.{{PropertyName}},
                {{/Configuration.Record.ParameterList}}
                {{#Properties}}
                ["{{PropertyName}}"] = instance.{{PropertyName}},
                {{/Properties}}
            };
            return dictionary;
        }
    }