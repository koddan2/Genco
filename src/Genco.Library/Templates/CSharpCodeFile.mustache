{{& FileHeader}}
{{#Usings.Syntaxes}}
{{.}}
{{/Usings.Syntaxes}}

{{#NullableEnable}}
#nullable enable
{{/NullableEnable}}

namespace {{Namespace}}
{
{{& CustomCodeSyntax}}
    /// <summary>
    /// This is a generated class.
    /// The tool used to generate this file is called Genco.
    /// </summary>
    {{#ModelAttributes}}
    {{Syntax}}
    {{/ModelAttributes}}
    public {{ModelTypeSyntax}} {{ModelTypeName}}{{Record.ParameterListSyntax}}
    {
        {{#Constructors}}
        public {{ModelTypeName}}{{ParameterListSyntax}}
        {
{{& CustomCodeSyntax}}
        }
        {{/Constructors}}

        {{#Properties}}
        // {{PropertyName}}
        {{PropertyAttributeSyntax}}
        public {{PropertyRequiredSyntax}}{{PropertyTypeSyntax}} {{PropertyName}} { get;{{PropertySetterSyntax}} }{{PropertyDefaultValueSyntax}}
        {{/Properties}}

        {{#HasDefaultConstructor}}
        {{#Configuration.Generate.Mappers.Dictionary}}
        public static {{ModelTypeName}} FromDictionary(IDictionary<string, object?> dictionary)
        {
            // var result = new {{ModelTypeName}}();
            var result = ({{ModelTypeName}})RuntimeHelpers.GetUninitializedObject(
                typeof({{ModelTypeName}}));
            // var constructor = typeof({{ModelTypeName}}).GetConstructor(Type.EmptyTypes);
            // constructor.Invoke(result);
            result.PopulateFromDictionary(dictionary);
            return result;
        }
        {{/Configuration.Generate.Mappers.Dictionary}}

        {{#Configuration.Generate.Mappers.AdoNet}}
        public static async IAsyncEnumerable<{{ModelTypeName}}> LoadRecordsAsync(DbDataReader reader)
        {
            while (await reader.ReadAsync())
            {
                yield return LoadRecord(reader);
            }
        }
        public static IEnumerable<{{ModelTypeName}}> LoadRecords(DbDataReader reader)
        {
            while (reader.Read())
            {
                yield return LoadRecord(reader);
            }
        }
        public static {{ModelTypeName}} LoadRecord(DbDataReader reader)
        {
            Dictionary<string, int> columnIndexes = new();
            for (int i = 0; i < reader.FieldCount; ++i)
            {
                columnIndexes.Add(reader.GetName(i), i);
            }
            var result = new {{ModelTypeName}}()
            {
                {{#Properties}}
                {{#PropertyIsInit}}
                {{PropertyName}} = reader.GetFieldValue<{{PropertyTypeSyntax}}>(
                    columnIndexes["{{PropertyNameLower}}"]),
                {{/PropertyIsInit}}
                {{/Properties}}
            };
            {{#Properties}}
            // {{PropertyName}}
            {{^PropertyIsInit}}
            if (columnIndexes
                .TryGetValue("{{PropertyNameLower}}", out int ordinal_{{PropertyName}}))
            {
                result.{{PropertyName}} = reader.GetFieldValue<{{PropertyTypeSyntax}}>(ordinal_{{PropertyName}});
            }
            {{/PropertyIsInit}}
            {{/Properties}}
            
            return result;
        }

        public static class Sql
        {
            public enum IdentifierCasing
            {
                Verbatim = 0,
                Invariant = 1,
                Lower = 2,
                Upper = 3,
            }

            static IEnumerable<string> TransformCasing(IEnumerable<string> names, IdentifierCasing casing) => names.Select(x => TransformCasing(x, casing));
            static string TransformCasing(string name, IdentifierCasing casing) => casing switch
            {
                IdentifierCasing.Lower => name.ToLowerInvariant(),
                IdentifierCasing.Upper => name.ToUpperInvariant(),
                IdentifierCasing.Invariant => name.ToUpperInvariant(),
                _ => name,
            };

            public static string GetInsertCommandText (string tableName = "{{ModelTypeName}}", IdentifierCasing casing = default, params string[] skipProperties)
            {
                var relevantProperties = new []
                {
                    {{#Properties}}
                    "{{PropertyName}}",
                    {{/Properties}}
                }.Except(skipProperties ?? Array.Empty<string>());
                var relevantPropertiesWithCasing = TransformCasing(relevantProperties, casing);
                var template = @"INSERT INTO {0}
({1})
VALUES ({2});";
                var columnsList = string.Join(", ", relevantPropertiesWithCasing);
                var valuesList = string.Join(", ", relevantProperties.Select(prop => $"@{prop}"));
                var result = string.Format(template, tableName, columnsList, valuesList);
                return result;
            }
        }
        {{/Configuration.Generate.Mappers.AdoNet}}
        {{/HasDefaultConstructor}}
    }

    public enum {{ModelTypeName}}Property
    {
        {{#Record.Parameters}}
        {{ParameterName}},
        {{/Record.Parameters}}
        {{#Properties}}
        {{PropertyName}},
        {{/Properties}}
    }

    internal static class {{ModelTypeName}}Meta
    {
        {{#AllProperties}}
        private static System.Reflection.PropertyInfo? _Property_{{PropertyName}} = null;
        {{/AllProperties}}

        internal static readonly Type ModelType = typeof({{ModelTypeName}});

        internal static System.Reflection.PropertyInfo? GetProperty({{ModelTypeName}}Property property)
        {
            {{#AllProperties}}
            if (property == {{ModelTypeName}}Property.{{PropertyName}})
            {
                return Property_{{PropertyName}};
            }
            {{/AllProperties}}
            return null;
        }

        {{#AllProperties}}
        internal static System.Reflection.PropertyInfo Property_{{PropertyName}}
        {
            get
            {
                if (_Property_{{PropertyName}} == null)
                {
                    _Property_{{PropertyName}} = 
                        ModelType.GetProperty("{{PropertyName}}")
                            ?? throw new InvalidOperationException("Could not find property '{{PropertyName}}' on {{ModelTypeName}}");
                }

                return _Property_{{PropertyName}};
            }
        }
        {{/AllProperties}}
        {{#AllProperties}}

        /// <summary>Property <code>{{PropertyName}}</code> is <see cref="{{PropertyBaseTypeSyntax}}"/>.</summary>
        internal static Type Type_{{PropertyName}} { get; } = typeof({{PropertyBaseTypeSyntax}});
        internal static bool Type_{{PropertyName}}_IsNullable { get; } = {{PropertyIsNullableSyntax}};
        {{/AllProperties}}
    }

{{#Configuration.Generate.Mappers.Dictionary}}
{{>CSharpCodeDictionaryMappingMethods}}
{{/Configuration.Generate.Mappers.Dictionary}}

{{#Configuration.Generate.Mappers.AdoNet}}
{{>CSharpCodeAdoNetMappingMethods}}
{{/Configuration.Generate.Mappers.AdoNet}}

{{>CSharpCodeDtoTypeAndExtensions}}

    public static class {{ModelTypeName}}Extensions
    {
        public static IEnumerable<({{ModelTypeName}}Property Property, object? Value)> Enumerate(this {{ModelTypeName}} model)
        {
            {{#Record.Parameters}}
            yield return ({{ModelTypeName}}Property.{{ParameterName}}, model.{{ParameterName}});
            {{/Record.Parameters}}
            {{#Properties}}
            yield return ({{ModelTypeName}}Property.{{PropertyName}}, model.{{PropertyName}});
            {{/Properties}}
        }
    }
###REPLACE###
}