// <auto-generated>
//     This file is generated by a tool.
// </auto-generated>
/*
Copyright (c) 2023 Bj√∂rn Roberg
Permission is hereby granted, free of charge, to any person
obtaining a copy of this software and associated documentation
files (the "Software"), to deal in the Software without
restriction, including without limitation the rights to use,
copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following
conditions:
The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.
*/
using System.Runtime.CompilerServices;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Data;
using System.ComponentModel.DataAnnotations;
using RangeAttribute = System.ComponentModel.DataAnnotations.RangeAttribute;
#nullable enable
namespace Genco.Test.Example
{
    public enum Status
    {
        Unknown,
        Ok,
        Intermediate,
        Problematic,
    }
    /// <summary>
    /// This is a generated class.
    /// The tool used to generate this file is called Genco.
    /// </summary>
    public partial record MyMoreComplexModel([property: Required, Range(0, 100)] int Id, bool Important = true)
    {
        // Name
        [MaxLength(0xff)]
        public string? Name { get; init; }
        // CreatedAt
        public DateTime CreatedAt { get; } = DateTime.Now;
        // Status
        public Status Status { get; set; } = Status.Ok;
        // ExternalReference
        public Guid? ExternalReference { get; set; }
    }
    public enum MyMoreComplexModelProperty
    {
        Id,
        Important,
        Name,
        CreatedAt,
        Status,
        ExternalReference,
    }
    internal static class MyMoreComplexModelMeta
    {
        private static System.Reflection.PropertyInfo? _Property_Id = null;
        private static System.Reflection.PropertyInfo? _Property_Important = null;
        private static System.Reflection.PropertyInfo? _Property_Name = null;
        private static System.Reflection.PropertyInfo? _Property_CreatedAt = null;
        private static System.Reflection.PropertyInfo? _Property_Status = null;
        private static System.Reflection.PropertyInfo? _Property_ExternalReference = null;
        internal static readonly Type ModelType = typeof(MyMoreComplexModel);
        internal static System.Reflection.PropertyInfo? GetProperty(MyMoreComplexModelProperty property)
        {
            if (property == MyMoreComplexModelProperty.Id)
            {
                return Property_Id;
            }
            if (property == MyMoreComplexModelProperty.Important)
            {
                return Property_Important;
            }
            if (property == MyMoreComplexModelProperty.Name)
            {
                return Property_Name;
            }
            if (property == MyMoreComplexModelProperty.CreatedAt)
            {
                return Property_CreatedAt;
            }
            if (property == MyMoreComplexModelProperty.Status)
            {
                return Property_Status;
            }
            if (property == MyMoreComplexModelProperty.ExternalReference)
            {
                return Property_ExternalReference;
            }
            return null;
        }
        internal static System.Reflection.PropertyInfo Property_Id
        {
            get
            {
                if (_Property_Id == null)
                {
                    _Property_Id =
                        ModelType.GetProperty("Id")
                            ?? throw new InvalidOperationException("Could not find property 'Id' on MyMoreComplexModel");
                }
                return _Property_Id;
            }
        }
        internal static System.Reflection.PropertyInfo Property_Important
        {
            get
            {
                if (_Property_Important == null)
                {
                    _Property_Important =
                        ModelType.GetProperty("Important")
                            ?? throw new InvalidOperationException("Could not find property 'Important' on MyMoreComplexModel");
                }
                return _Property_Important;
            }
        }
        internal static System.Reflection.PropertyInfo Property_Name
        {
            get
            {
                if (_Property_Name == null)
                {
                    _Property_Name =
                        ModelType.GetProperty("Name")
                            ?? throw new InvalidOperationException("Could not find property 'Name' on MyMoreComplexModel");
                }
                return _Property_Name;
            }
        }
        internal static System.Reflection.PropertyInfo Property_CreatedAt
        {
            get
            {
                if (_Property_CreatedAt == null)
                {
                    _Property_CreatedAt =
                        ModelType.GetProperty("CreatedAt")
                            ?? throw new InvalidOperationException("Could not find property 'CreatedAt' on MyMoreComplexModel");
                }
                return _Property_CreatedAt;
            }
        }
        internal static System.Reflection.PropertyInfo Property_Status
        {
            get
            {
                if (_Property_Status == null)
                {
                    _Property_Status =
                        ModelType.GetProperty("Status")
                            ?? throw new InvalidOperationException("Could not find property 'Status' on MyMoreComplexModel");
                }
                return _Property_Status;
            }
        }
        internal static System.Reflection.PropertyInfo Property_ExternalReference
        {
            get
            {
                if (_Property_ExternalReference == null)
                {
                    _Property_ExternalReference =
                        ModelType.GetProperty("ExternalReference")
                            ?? throw new InvalidOperationException("Could not find property 'ExternalReference' on MyMoreComplexModel");
                }
                return _Property_ExternalReference;
            }
        }
        /// <summary>Property <code>Id</code> is <see cref="int"/>.</summary>
        internal static Type Type_Id { get; } = typeof(int);
        internal static bool Type_Id_IsNullable { get; } = false;
        /// <summary>Property <code>Important</code> is <see cref="bool"/>.</summary>
        internal static Type Type_Important { get; } = typeof(bool);
        internal static bool Type_Important_IsNullable { get; } = false;
        /// <summary>Property <code>Name</code> is <see cref="string"/>.</summary>
        internal static Type Type_Name { get; } = typeof(string);
        internal static bool Type_Name_IsNullable { get; } = true;
        /// <summary>Property <code>CreatedAt</code> is <see cref="DateTime"/>.</summary>
        internal static Type Type_CreatedAt { get; } = typeof(DateTime);
        internal static bool Type_CreatedAt_IsNullable { get; } = false;
        /// <summary>Property <code>Status</code> is <see cref="Status"/>.</summary>
        internal static Type Type_Status { get; } = typeof(Status);
        internal static bool Type_Status_IsNullable { get; } = false;
        /// <summary>Property <code>ExternalReference</code> is <see cref="Guid"/>.</summary>
        internal static Type Type_ExternalReference { get; } = typeof(Guid);
        internal static bool Type_ExternalReference_IsNullable { get; } = true;
    }
    // CSharpCodeDictionaryMappingMethods
    public static class MyMoreComplexModelDictionaryMappingExtensions
    {
        public static void PopulateFromDictionary(this MyMoreComplexModel instance, IDictionary<string, object?> dictionary)
        {
            // Name
            if (dictionary.TryGetValue("Name", out var Name_AsObj))
            {
#if DEBUG
                if (Name_AsObj is not null)
                {
                    var type = Name_AsObj.GetType();
                    var value = Name_AsObj;
                    System.Diagnostics.Debug.Assert(
                        MyMoreComplexModelMeta.Property_Name.PropertyType.IsAssignableFrom(type),
                        $"dictionary['Name'] of type '{type.FullName}' (Value: {value}) is not assignable to MyMoreComplexModel.Name");
                }
#endif
                // instance.Name = (string?)Name_AsObj;
                MyMoreComplexModelMeta.Property_Name.SetValue(instance, (string?)Name_AsObj);
            }
            // CreatedAt
            if (dictionary.TryGetValue("CreatedAt", out var CreatedAt_AsObj))
            {
#if DEBUG
                if (CreatedAt_AsObj is not null)
                {
                    var type = CreatedAt_AsObj.GetType();
                    var value = CreatedAt_AsObj;
                    System.Diagnostics.Debug.Assert(
                        MyMoreComplexModelMeta.Property_CreatedAt.PropertyType.IsAssignableFrom(type),
                        $"dictionary['CreatedAt'] of type '{type.FullName}' (Value: {value}) is not assignable to MyMoreComplexModel.CreatedAt");
                }
#endif
                if (CreatedAt_AsObj is not null)
                {
                    // instance.CreatedAt = (DateTime)CreatedAt_AsObj;
                    MyMoreComplexModelMeta.Property_CreatedAt.SetValue(instance, (DateTime)CreatedAt_AsObj);
                }
                else throw new ArgumentException("The value for the key 'CreatedAt' in the supplied dictionary is null", nameof(dictionary));
            }
            else throw new KeyNotFoundException("The key 'CreatedAt' was not present in the supplied dictionary");
            // Status
            if (dictionary.TryGetValue("Status", out var Status_AsObj))
            {
#if DEBUG
                if (Status_AsObj is not null)
                {
                    var type = Status_AsObj.GetType();
                    var value = Status_AsObj;
                    System.Diagnostics.Debug.Assert(
                        MyMoreComplexModelMeta.Property_Status.PropertyType.IsAssignableFrom(type),
                        $"dictionary['Status'] of type '{type.FullName}' (Value: {value}) is not assignable to MyMoreComplexModel.Status");
                }
#endif
                if (Status_AsObj is not null)
                {
                    // instance.Status = (Status)Status_AsObj;
                    MyMoreComplexModelMeta.Property_Status.SetValue(instance, (Status)Status_AsObj);
                }
                else throw new ArgumentException("The value for the key 'Status' in the supplied dictionary is null", nameof(dictionary));
            }
            else throw new KeyNotFoundException("The key 'Status' was not present in the supplied dictionary");
            // ExternalReference
            if (dictionary.TryGetValue("ExternalReference", out var ExternalReference_AsObj))
            {
#if DEBUG
                if (ExternalReference_AsObj is not null)
                {
                    var type = ExternalReference_AsObj.GetType();
                    var value = ExternalReference_AsObj;
                    System.Diagnostics.Debug.Assert(
                        MyMoreComplexModelMeta.Property_ExternalReference.PropertyType.IsAssignableFrom(type),
                        $"dictionary['ExternalReference'] of type '{type.FullName}' (Value: {value}) is not assignable to MyMoreComplexModel.ExternalReference");
                }
#endif
                // instance.ExternalReference = (Guid?)ExternalReference_AsObj;
                MyMoreComplexModelMeta.Property_ExternalReference.SetValue(instance, (Guid?)ExternalReference_AsObj);
            }
            else instance.ExternalReference = default;
        }
        public static Dictionary<string, object?> ToDictionary(this MyMoreComplexModel instance)
        {
            var dictionary = new Dictionary<string, object?>
            {
                ["Id"] = instance.Id,
                ["Important"] = instance.Important,
                ["Name"] = instance.Name,
                ["CreatedAt"] = instance.CreatedAt,
                ["Status"] = instance.Status,
                ["ExternalReference"] = instance.ExternalReference,
            };
            return dictionary;
        }
    }
    // CSharpCodeAdoNetMappingMethods
    public static class MyMoreComplexModelAdoNetMappingExtensions
    {
        /// <summary>
        /// Adds all properties (that should not be skipped) using the following template:
        /// <code>"@" + nameof(PropertyName)</code>
        /// E.g. <example>
        /// <code>"@MyCamelCasePropName"</code>
        /// </example>
        /// Some database providers are case-sensitive, so make sure you define them such
        /// that they are compatible with this scheme.
        /// </summary>
        public static void AddAllParameters(this MyMoreComplexModel model, IDbCommand command, params string[] skipProperties)
        {
            void AddParameter<T>(string parameterName, T value, string name)
            {
                if (skipProperties?.Contains(name) is true)
                {
                    return;
                }
                var newParameter = command.CreateParameter();
                newParameter.ParameterName = parameterName;
                newParameter.Value = value;
                command.Parameters.Add(newParameter);
            }
            AddParameter("@Id", model.Id, "Id");
            AddParameter("@Important", model.Important, "Important");
            AddParameter("@Name", model.Name, "Name");
            AddParameter("@CreatedAt", model.CreatedAt, "CreatedAt");
            AddParameter("@Status", model.Status, "Status");
            AddParameter("@ExternalReference", model.ExternalReference, "ExternalReference");
        }
    }
    // CSharpCodeDtoTypeAndExtensions
    public partial record MyMoreComplexModelDto
    {
        public string? Name { get; set; }
        public DateTime? CreatedAt { get; set; }
        public Status? Status { get; set; }
        public Guid? ExternalReference { get; set; }
    }
    public static class MyMoreComplexModelDtoMappingExtensions
    {
        public static MyMoreComplexModelDto ToDto(this MyMoreComplexModel instance)
        {
            var result = new MyMoreComplexModelDto();
            result.Name = instance.Name;
            result.CreatedAt = instance.CreatedAt;
            result.Status = instance.Status;
            result.ExternalReference = instance.ExternalReference;
            return result;
        }
        public static MyMoreComplexModel ToModel(this MyMoreComplexModelDto dto)
        {
            var obj = RuntimeHelpers.GetUninitializedObject(
                MyMoreComplexModelMeta.ModelType);
            var result = (MyMoreComplexModel)obj;
            // result.Name = dto.Name;
            MyMoreComplexModelMeta.Property_Name.SetValue(result, dto.Name);
            // result.CreatedAt = dto.CreatedAt;
            MyMoreComplexModelMeta.Property_CreatedAt.SetValue(result, dto.CreatedAt);
            // result.Status = dto.Status;
            MyMoreComplexModelMeta.Property_Status.SetValue(result, dto.Status);
            // result.ExternalReference = dto.ExternalReference;
            MyMoreComplexModelMeta.Property_ExternalReference.SetValue(result, dto.ExternalReference);
            return result;
        }
    }
    public static class MyMoreComplexModelExtensions
    {
        public static IEnumerable<(MyMoreComplexModelProperty Property, object? Value)> Enumerate(this MyMoreComplexModel model)
        {
            yield return (MyMoreComplexModelProperty.Id, model.Id);
            yield return (MyMoreComplexModelProperty.Important, model.Important);
            yield return (MyMoreComplexModelProperty.Name, model.Name);
            yield return (MyMoreComplexModelProperty.CreatedAt, model.CreatedAt);
            yield return (MyMoreComplexModelProperty.Status, model.Status);
            yield return (MyMoreComplexModelProperty.ExternalReference, model.ExternalReference);
        }
    }
}

