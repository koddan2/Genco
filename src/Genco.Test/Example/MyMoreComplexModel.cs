// <auto-generated>
//     This file is generated by a tool.
// </auto-generated>
/*
Copyright (c) 2023 Bj√∂rn Roberg

Permission is hereby granted, free of charge, to any person
obtaining a copy of this software and associated documentation
files (the "Software"), to deal in the Software without
restriction, including without limitation the rights to use,
copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following
conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.
*/
using System;
using System.Collections.Generic;
using System.Linq;
using System.Data;
using System.ComponentModel.DataAnnotations;
using RangeAttribute = System.ComponentModel.DataAnnotations.RangeAttribute;

#nullable enable

namespace Genco.Test.Example
{
    public enum Status
    {
        Unknown,
        Ok,
        Intermediate,
        Problematic,
    }

    /// <summary>
    /// This is a generated class.
    /// The tool used to generate this file is called Genco.
    /// </summary>
    
    public partial record MyMoreComplexModel([property: Required, Range(0, 100)] int Id, bool Important = true)
    {
        

        [MaxLength(0xff)]
        public string? Name { get; init; }
        
        public DateTime CreatedAt { get; } = DateTime.Now;
        
        public Status Status { get; set; } = Status.Ok;
        
        public Guid? ExternalReference { get; set; }
    }

    public static class MyMoreComplexModelDictionaryMappingExtensions
    {

        public static void PopulateFromDictionary(this MyMoreComplexModel instance, IDictionary<string, object?> dictionary)
        {
            if (dictionary.TryGetValue("Status", out var Status_AsObj))
            {
                if (Status_AsObj is not null)
                {
                    instance.Status = (Status)Status_AsObj;
                }
                else
                {
                    throw new ArgumentException("The value for the key 'Status' in the supplied dictionary is null", nameof(dictionary));
                }
            }
            else
            {
                throw new KeyNotFoundException("The key 'Status' was not present in the supplied dictionary");
            }
            if (dictionary.TryGetValue("ExternalReference", out var ExternalReference_AsObj))
            {
                instance.ExternalReference = (Guid?)ExternalReference_AsObj;
            }
            else
            {
                instance.ExternalReference = null;
            }
        }

        public static IDictionary<string, object?> ToDictionary(this MyMoreComplexModel instance)
        {
            var dictionary = new Dictionary<string, object?>
            {
                ["Id"] = instance.Id,
                ["Important"] = instance.Important,
                ["Name"] = instance.Name,
                ["CreatedAt"] = instance.CreatedAt,
                ["Status"] = instance.Status,
                ["ExternalReference"] = instance.ExternalReference,
            };
            return dictionary;
        }
    }
    public static class MyMoreComplexModelAdoNetMappingExtensions
    {
        public static void AddAllParameters(this MyMoreComplexModel model, IDbCommand command)
        {
            void AddParameter<T>(string name, T value)
            {
                var newParameter = command.CreateParameter();
                newParameter.ParameterName = name;
                newParameter.Value = value;
                command.Parameters.Add(newParameter);
            }

            AddParameter("@Id", model.Id);
            AddParameter("@Important", model.Important);
            AddParameter("@Name", model.Name);
            AddParameter("@CreatedAt", model.CreatedAt);
            AddParameter("@Status", model.Status);
            AddParameter("@ExternalReference", model.ExternalReference);
        }

    }}