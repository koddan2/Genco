// <auto-generated>
//     This file is generated by a tool.
// </auto-generated>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Data;
using System.ComponentModel.DataAnnotations;
using RangeAttribute = System.ComponentModel.DataAnnotations.RangeAttribute;

#nullable enable

namespace Genco.Test.Example
{

    /// <summary>
    /// This is a generated class.
    /// The tool used to generate this file is called Genco.
    /// </summary>
    
    public partial record MySimpleModel()
    {
        

        
        public int Id { get; set; }
        [MaxLength(0xff)]
        public string? Name { get; set; }
        
        public DateTime CreatedAt { get; set; } = DateTime.Now;
        
        public Status Status { get; set; } = Status.Ok;
        
        public Guid? ExternalReference { get; set; }

        public static MySimpleModel FromDictionary(IDictionary<string, object?> dictionary)
        {
            var result = new MySimpleModel();
            result.PopulateFromDictionary(dictionary);
            return result;
        }
    }

    public static class MySimpleModelDictionaryMappingExtensions
    {
        public static void PopulateFromDictionary(this MySimpleModel instance, IDictionary<string, object?> dictionary)
        {
            // Id
            if (dictionary.TryGetValue("Id", out var Id_Boxed))
                if (Id_Boxed is not null)
                    instance.Id = (int)Id_Boxed;
                else
                    throw new ArgumentException("The value for the key 'Id' in the supplied dictionary is null", nameof(dictionary));
            else
                throw new KeyNotFoundException("The key 'Id' was not present in the supplied dictionary");
            // Name
            if (dictionary.TryGetValue("Name", out var Name_Boxed))
                instance.Name = (string?)Name_Boxed;
            else
                instance.Name = null;
            // CreatedAt
            if (dictionary.TryGetValue("CreatedAt", out var CreatedAt_Boxed))
                if (CreatedAt_Boxed is not null)
                    instance.CreatedAt = (DateTime)CreatedAt_Boxed;
                else
                    throw new ArgumentException("The value for the key 'CreatedAt' in the supplied dictionary is null", nameof(dictionary));
            else
                throw new KeyNotFoundException("The key 'CreatedAt' was not present in the supplied dictionary");
            // Status
            if (dictionary.TryGetValue("Status", out var Status_Boxed))
                if (Status_Boxed is not null)
                    instance.Status = (Status)Status_Boxed;
                else
                    throw new ArgumentException("The value for the key 'Status' in the supplied dictionary is null", nameof(dictionary));
            else
                throw new KeyNotFoundException("The key 'Status' was not present in the supplied dictionary");
            // ExternalReference
            if (dictionary.TryGetValue("ExternalReference", out var ExternalReference_Boxed))
                instance.ExternalReference = (Guid?)ExternalReference_Boxed;
            else
                instance.ExternalReference = null;
        }

        public static IDictionary<string, object?> ToDictionary(this MySimpleModel instance)
        {
            var dictionary = new Dictionary<string, object?>
            {
                ["Id"] = instance.Id,
                ["Name"] = instance.Name,
                ["CreatedAt"] = instance.CreatedAt,
                ["Status"] = instance.Status,
                ["ExternalReference"] = instance.ExternalReference,
            };
            return dictionary;
        }
    }
    public static class MySimpleModelAdoNetMappingExtensions
    {
        public static void AddAllParameters(this MySimpleModel model, IDbCommand command)
        {
            void AddParameter<T>(string name, T value)
            {
                var newParameter = command.CreateParameter();
                newParameter.ParameterName = name;
                newParameter.Value = value;
                command.Parameters.Add(newParameter);
            }

            AddParameter("@Id", model.Id);
            AddParameter("@Name", model.Name);
            AddParameter("@CreatedAt", model.CreatedAt);
            AddParameter("@Status", model.Status);
            AddParameter("@ExternalReference", model.ExternalReference);
        }

        public static MySimpleModel LoadRecord(IDataRecord record)
        {
            var result = new MySimpleModel();
            result.Id = (int)record["Id"];
            result.Name = (string?)record["Name"];
            result.CreatedAt = (DateTime)record["CreatedAt"];
            result.Status = (Status)record["Status"];
            result.ExternalReference = (Guid?)record["ExternalReference"];
            return result;
        }
    }}