// <auto-generated>
//     This file is generated by a tool.
// </auto-generated>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Data;
using System.ComponentModel.DataAnnotations;
using RangeAttribute = System.ComponentModel.DataAnnotations.RangeAttribute;
#nullable enable
namespace Genco.Test.Example
{
    public static class SomeExtraStuff
    {
        public static readonly int Value = 1;
    }
    /// <summary>
    /// This is a generated class.
    /// The tool used to generate this file is called Genco.
    /// </summary>
    public partial record MySimpleModel
    {
        public MySimpleModel()
        {
            Console.WriteLine("Testing");
            System.Diagnostics.Debug.Assert(GetHashCode() != 0, "OOPS");
        }
        // Id
        [Range(0x1000, 0xffff)]
        public int Id { get; set; }
        // Name
        [MaxLength(0xff)]
        public string? Name { get; set; }
        // CreatedAt
        public DateTime CreatedAt { get; set; } = DateTime.Now;
        // Status
        public Status Status { get; set; } = Status.Ok;
        // ExternalReference
        public Guid? ExternalReference { get; set; }
        public static MySimpleModel FromDictionary(IDictionary<string, object?> dictionary)
        {
            var result = new MySimpleModel();
            result.PopulateFromDictionary(dictionary);
            return result;
        }
        public static MySimpleModel LoadRecord(IDataRecord record)
        {
            var result = new MySimpleModel();
            // Id
            if (record["Id"] is object Id_AsObj && Id_AsObj is not null)
            {
#if DEBUG
                var type = Id_AsObj.GetType();
                var value = Id_AsObj;
                System.Diagnostics.Debug.Assert(
                    MySimpleModelMeta.Property_Id.PropertyType.IsAssignableFrom(type),
                    $"record['Id'] of type '{type.FullName}' (Value: {value}) is not assignable to MySimpleModel.Id");
#endif
                result.Id = (int)Id_AsObj;
            }
            // Name
            if (record["Name"] is object Name_AsObj && Name_AsObj is not null)
            {
#if DEBUG
                var type = Name_AsObj.GetType();
                var value = Name_AsObj;
                System.Diagnostics.Debug.Assert(
                    MySimpleModelMeta.Property_Name.PropertyType.IsAssignableFrom(type),
                    $"record['Name'] of type '{type.FullName}' (Value: {value}) is not assignable to MySimpleModel.Name");
#endif
                result.Name = (string?)Name_AsObj;
            }
            // CreatedAt
            if (record["CreatedAt"] is object CreatedAt_AsObj && CreatedAt_AsObj is not null)
            {
#if DEBUG
                var type = CreatedAt_AsObj.GetType();
                var value = CreatedAt_AsObj;
                System.Diagnostics.Debug.Assert(
                    MySimpleModelMeta.Property_CreatedAt.PropertyType.IsAssignableFrom(type),
                    $"record['CreatedAt'] of type '{type.FullName}' (Value: {value}) is not assignable to MySimpleModel.CreatedAt");
#endif
                result.CreatedAt = (DateTime)CreatedAt_AsObj;
            }
            // Status
            if (record["Status"] is object Status_AsObj && Status_AsObj is not null)
            {
#if DEBUG
                var type = Status_AsObj.GetType();
                var value = Status_AsObj;
                System.Diagnostics.Debug.Assert(
                    MySimpleModelMeta.Property_Status.PropertyType.IsAssignableFrom(type),
                    $"record['Status'] of type '{type.FullName}' (Value: {value}) is not assignable to MySimpleModel.Status");
#endif
                result.Status = (Status)Status_AsObj;
            }
            // ExternalReference
            if (record["ExternalReference"] is object ExternalReference_AsObj && ExternalReference_AsObj is not null)
            {
#if DEBUG
                var type = ExternalReference_AsObj.GetType();
                var value = ExternalReference_AsObj;
                System.Diagnostics.Debug.Assert(
                    MySimpleModelMeta.Property_ExternalReference.PropertyType.IsAssignableFrom(type),
                    $"record['ExternalReference'] of type '{type.FullName}' (Value: {value}) is not assignable to MySimpleModel.ExternalReference");
#endif
                result.ExternalReference = (Guid?)ExternalReference_AsObj;
            }
            return result;
        }
    }
#if DEBUG
    internal static class MySimpleModelMeta
    {
        internal static readonly Type ModelType = typeof(MySimpleModel);
        internal static readonly System.Reflection.PropertyInfo Property_Id =
            ModelType.GetProperty("Id")
            ?? throw new InvalidOperationException("Could not find property 'Id' on MySimpleModel");
        internal static readonly System.Reflection.PropertyInfo Property_Name =
            ModelType.GetProperty("Name")
            ?? throw new InvalidOperationException("Could not find property 'Name' on MySimpleModel");
        internal static readonly System.Reflection.PropertyInfo Property_CreatedAt =
            ModelType.GetProperty("CreatedAt")
            ?? throw new InvalidOperationException("Could not find property 'CreatedAt' on MySimpleModel");
        internal static readonly System.Reflection.PropertyInfo Property_Status =
            ModelType.GetProperty("Status")
            ?? throw new InvalidOperationException("Could not find property 'Status' on MySimpleModel");
        internal static readonly System.Reflection.PropertyInfo Property_ExternalReference =
            ModelType.GetProperty("ExternalReference")
            ?? throw new InvalidOperationException("Could not find property 'ExternalReference' on MySimpleModel");
    }
#endif
    public static class MySimpleModelDictionaryMappingExtensions
    {
        public static void PopulateFromDictionary(this MySimpleModel instance, IDictionary<string, object?> dictionary)
        {
            // Id
            if (dictionary.TryGetValue("Id", out var Id_AsObj))
            {
#if DEBUG
                if (Id_AsObj is not null)
                {
                    var type = Id_AsObj.GetType();
                    var value = Id_AsObj;
                    System.Diagnostics.Debug.Assert(
                        MySimpleModelMeta.Property_Id.PropertyType.IsAssignableFrom(type),
                        $"dictionary['Id'] of type '{type.FullName}' (Value: {value}) is not assignable to MySimpleModel.Id");
                }
#endif
                if (Id_AsObj is not null) instance.Id = (int)Id_AsObj;
                else throw new ArgumentException("The value for the key 'Id' in the supplied dictionary is null", nameof(dictionary));
            }
            else throw new KeyNotFoundException("The key 'Id' was not present in the supplied dictionary");
            // Name
            if (dictionary.TryGetValue("Name", out var Name_AsObj))
            {
#if DEBUG
                if (Name_AsObj is not null)
                {
                    var type = Name_AsObj.GetType();
                    var value = Name_AsObj;
                    System.Diagnostics.Debug.Assert(
                        MySimpleModelMeta.Property_Name.PropertyType.IsAssignableFrom(type),
                        $"dictionary['Name'] of type '{type.FullName}' (Value: {value}) is not assignable to MySimpleModel.Name");
                }
#endif
                instance.Name = (string?)Name_AsObj;
            }
            else instance.Name = null;
            // CreatedAt
            if (dictionary.TryGetValue("CreatedAt", out var CreatedAt_AsObj))
            {
#if DEBUG
                if (CreatedAt_AsObj is not null)
                {
                    var type = CreatedAt_AsObj.GetType();
                    var value = CreatedAt_AsObj;
                    System.Diagnostics.Debug.Assert(
                        MySimpleModelMeta.Property_CreatedAt.PropertyType.IsAssignableFrom(type),
                        $"dictionary['CreatedAt'] of type '{type.FullName}' (Value: {value}) is not assignable to MySimpleModel.CreatedAt");
                }
#endif
                if (CreatedAt_AsObj is not null) instance.CreatedAt = (DateTime)CreatedAt_AsObj;
                else throw new ArgumentException("The value for the key 'CreatedAt' in the supplied dictionary is null", nameof(dictionary));
            }
            else throw new KeyNotFoundException("The key 'CreatedAt' was not present in the supplied dictionary");
            // Status
            if (dictionary.TryGetValue("Status", out var Status_AsObj))
            {
#if DEBUG
                if (Status_AsObj is not null)
                {
                    var type = Status_AsObj.GetType();
                    var value = Status_AsObj;
                    System.Diagnostics.Debug.Assert(
                        MySimpleModelMeta.Property_Status.PropertyType.IsAssignableFrom(type),
                        $"dictionary['Status'] of type '{type.FullName}' (Value: {value}) is not assignable to MySimpleModel.Status");
                }
#endif
                if (Status_AsObj is not null) instance.Status = (Status)Status_AsObj;
                else throw new ArgumentException("The value for the key 'Status' in the supplied dictionary is null", nameof(dictionary));
            }
            else throw new KeyNotFoundException("The key 'Status' was not present in the supplied dictionary");
            // ExternalReference
            if (dictionary.TryGetValue("ExternalReference", out var ExternalReference_AsObj))
            {
#if DEBUG
                if (ExternalReference_AsObj is not null)
                {
                    var type = ExternalReference_AsObj.GetType();
                    var value = ExternalReference_AsObj;
                    System.Diagnostics.Debug.Assert(
                        MySimpleModelMeta.Property_ExternalReference.PropertyType.IsAssignableFrom(type),
                        $"dictionary['ExternalReference'] of type '{type.FullName}' (Value: {value}) is not assignable to MySimpleModel.ExternalReference");
                }
#endif
                instance.ExternalReference = (Guid?)ExternalReference_AsObj;
            }
            else instance.ExternalReference = null;
        }
        public static IDictionary<string, object?> ToDictionary(this MySimpleModel instance)
        {
            var dictionary = new Dictionary<string, object?>
            {
                ["Id"] = instance.Id,
                ["Name"] = instance.Name,
                ["CreatedAt"] = instance.CreatedAt,
                ["Status"] = instance.Status,
                ["ExternalReference"] = instance.ExternalReference,
            };
            return dictionary;
        }
    }
    public static class MySimpleModelAdoNetMappingExtensions
    {
        public static void AddAllParameters(this MySimpleModel model, IDbCommand command, string[]? skipProperties = null)
        {
            void AddParameter<T>(string parameterName, T value, string name)
            {
                if (skipProperties?.Contains(name) is true)
                {
                    return;
                }
                var newParameter = command.CreateParameter();
                newParameter.ParameterName = parameterName;
                newParameter.Value = value;
                command.Parameters.Add(newParameter);
            }
            AddParameter("@Id", model.Id, "Id");
            AddParameter("@Name", model.Name, "Name");
            AddParameter("@CreatedAt", model.CreatedAt, "CreatedAt");
            AddParameter("@Status", model.Status, "Status");
            AddParameter("@ExternalReference", model.ExternalReference, "ExternalReference");
        }
    }
    public partial record MySimpleModelDto
    {
        public int Id { get; set; }
        public string? Name { get; set; }
        public DateTime CreatedAt { get; set; }
        public Status Status { get; set; }
        public Guid? ExternalReference { get; set; }
    }
    public static class MySimpleModelDtoMappingExtensions
    {
        public static MySimpleModelDto ToDto(this MySimpleModel instance)
        {
            var result = new MySimpleModelDto();
            result.Id = instance.Id;
            result.Name = instance.Name;
            result.CreatedAt = instance.CreatedAt;
            result.Status = instance.Status;
            result.ExternalReference = instance.ExternalReference;
            return result;
        }
        public static MySimpleModel ToModel(this MySimpleModelDto dto)
        {
            var result = new MySimpleModel();
            result.Id = dto.Id;
            result.Name = dto.Name;
            result.CreatedAt = dto.CreatedAt;
            result.Status = dto.Status;
            result.ExternalReference = dto.ExternalReference;
            return result;
        }
    }
}

