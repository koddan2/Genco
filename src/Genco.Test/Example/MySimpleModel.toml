FileHeader = """
// <auto-generated>
//     This file is generated by a tool.
// </auto-generated>
"""

PostInclude = "./Common.toml"

# can be "class", "struct", "record", "record struct", "readonly record struct"
# but also, if the type should be abstract or partial, it can be added here too,
# e.g. "abstract class" or "partial record" &c.
# defaults to "record"
Type = "partial record"

Usings = [
    # (optional) default usings
    "System",
    "System.Collections.Generic",
    "System.Linq",
    "System.Data.Common", # DbDataReader

    # (optional) custom usings
    "System.Data",
    "System.ComponentModel.DataAnnotations",
    "RangeAttribute = System.ComponentModel.DataAnnotations.RangeAttribute"
]

CustomCode = """
public static class SomeExtraStuff
{
    public static readonly int Value = 1;
}
"""

# Extra.Data is a dict string => dynamic, so you can put anything here.
# It is available via Data in the templates
[Extra.Data.Test]
A = 1

# add extra templates that will render within the namespace declaration, at the end of the file.
[[Extra.Templates]]
# Either a path
#TestTemplate = "C:/temp/TestTemplate.mustache"
# Or a multiline string containint at least one Environment.NewLine
TestTemplate = """
/*
{{Data.Common.Info}}
*/
public enum PropertiesOf{{ModelTypeName}}
{
    {{#Properties}}
    /// <summary>
    /// Signifies the {{PropertyName}} property.
    /// Attributes: {{PropertyAttributeSyntax}}
    /// </summary>
    {{PropertyName}},
    {{/Properties}}
}
public class MyCustomCodeFor{{ModelTypeName}}
{
    public const int Value = {{Data.Test.A}};
    public static readonly Type MyType = typeof({{ModelTypeName}});
    /*
    */
}
"""

[Generate.Mappers]
# generate mapping methods that convert an instance of the model
# to and from an IDictionary<string, object?>
Dictionary = true
# generate mapping methods that convert an instance of the model
# to and from a System.Data.DataTable
# requires a reference to the System.Data.Common assembly, and "System.Data" in Usings
AdoNet = true

# the idea is that we can define several DTO objects to generate types and mappers for
# that has a subset of the main model's properties
[[Generate.DTO]]
Suffix = "Dto"
AllProperties = true
GenerateMappers = true

[[Constructors]]
ParameterList = []
CustomCode = """
Console.WriteLine("Testing");
System.Diagnostics.Debug.Assert(GetHashCode() != 0, "OOPS");
"""

[[Properties]]
Name = "Id"
Type = "long"
Setter = "set"
Attributes = "Range(0x1000, 0xffff)"

[[Properties]]
Name = "Name"
Type = "string?"
Setter = "set"
Attributes = "MaxLength(0xff)"

[[Properties]]
Name = "CreatedAt"
Type = "DateTime"
Setter = "set"
DefaultValue = "DateTime.Now"

[[Properties]]
Name = "Status"
Type = "Status"
Setter = "set"
DefaultValue = "Status.Ok"

[[Properties]]
Name = "ExternalReference"
Type = "Guid?"
Setter = "set"