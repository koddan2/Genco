// <auto-generated>
//     This file is generated by a tool.
// </auto-generated>
using System.Runtime.CompilerServices;
#nullable enable
namespace Genco.Test.Example
{
    /// <summary>
    /// This is a generated class.
    /// The tool used to generate this file is called Genco.
    /// </summary>
    public record Test1Model
    {
        // IntVal
        public required int IntVal { get; init; }
        // StrVal
        public required string StrVal { get; init; }
    }
    public enum Test1ModelProperty
    {
        IntVal,
        StrVal,
    }
    internal static class Test1ModelMeta
    {
        private static System.Reflection.PropertyInfo? _Property_IntVal = null;
        private static System.Reflection.PropertyInfo? _Property_StrVal = null;
        internal static readonly Type ModelType = typeof(Test1Model);
        internal static System.Reflection.PropertyInfo? GetProperty(Test1ModelProperty property)
        {
            if (property == Test1ModelProperty.IntVal)
            {
                return Property_IntVal;
            }
            if (property == Test1ModelProperty.StrVal)
            {
                return Property_StrVal;
            }
            return null;
        }
        internal static System.Reflection.PropertyInfo Property_IntVal
        {
            get
            {
                if (_Property_IntVal == null)
                {
                    _Property_IntVal =
                        ModelType.GetProperty("IntVal")
                            ?? throw new InvalidOperationException("Could not find property 'IntVal' on Test1Model");
                }
                return _Property_IntVal;
            }
        }
        internal static System.Reflection.PropertyInfo Property_StrVal
        {
            get
            {
                if (_Property_StrVal == null)
                {
                    _Property_StrVal =
                        ModelType.GetProperty("StrVal")
                            ?? throw new InvalidOperationException("Could not find property 'StrVal' on Test1Model");
                }
                return _Property_StrVal;
            }
        }
        /// <summary>Property <code>IntVal</code> is <see cref="int"/>.</summary>
        internal static Type Type_IntVal { get; } = typeof(int);
        internal static bool Type_IntVal_IsNullable { get; } = false;
        /// <summary>Property <code>StrVal</code> is <see cref="string"/>.</summary>
        internal static Type Type_StrVal { get; } = typeof(string);
        internal static bool Type_StrVal_IsNullable { get; } = false;
    }
    public static class Test1ModelExtensions
    {
        public static IEnumerable<(Test1ModelProperty Property, object? Value)> Enumerate(this Test1Model model)
        {
            yield return (Test1ModelProperty.IntVal, model.IntVal);
            yield return (Test1ModelProperty.StrVal, model.StrVal);
        }
    }
}

