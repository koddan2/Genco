// <auto-generated>
//     This file is generated by a tool.
// </auto-generated>
using System.Runtime.CompilerServices;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Data;
using System.Data.Common;
using System.ComponentModel.DataAnnotations;
using RangeAttribute = System.ComponentModel.DataAnnotations.RangeAttribute;
#nullable enable
namespace Genco.Test.Example
{
    /// <summary>
    /// This is a generated class.
    /// The tool used to generate this file is called Genco.
    /// </summary>
    public record Test2Model
    {
        // Id
        public required long Id { get; init; }
        // Name
        public required string Name { get; init; }
        // ComplexObj
        public Test1Model? ComplexObj { get; set; }
        public static Test2Model FromDictionary(IDictionary<string, object?> dictionary)
        {
            // var result = new Test2Model();
            var result = (Test2Model)RuntimeHelpers.GetUninitializedObject(
                typeof(Test2Model));
            // var constructor = typeof(Test2Model).GetConstructor(Type.EmptyTypes);
            // constructor.Invoke(result);
            result.PopulateFromDictionary(dictionary);
            return result;
        }
    }
    public enum Test2ModelProperty
    {
        Id,
        Name,
        ComplexObj,
    }
    internal static class Test2ModelMeta
    {
        private static System.Reflection.PropertyInfo? _Property_Id = null;
        private static System.Reflection.PropertyInfo? _Property_Name = null;
        private static System.Reflection.PropertyInfo? _Property_ComplexObj = null;
        internal static readonly Type ModelType = typeof(Test2Model);
        internal static System.Reflection.PropertyInfo? GetProperty(Test2ModelProperty property)
        {
            if (property == Test2ModelProperty.Id)
            {
                return Property_Id;
            }
            if (property == Test2ModelProperty.Name)
            {
                return Property_Name;
            }
            if (property == Test2ModelProperty.ComplexObj)
            {
                return Property_ComplexObj;
            }
            return null;
        }
        internal static System.Reflection.PropertyInfo Property_Id
        {
            get
            {
                if (_Property_Id == null)
                {
                    _Property_Id =
                        ModelType.GetProperty("Id")
                            ?? throw new InvalidOperationException("Could not find property 'Id' on Test2Model");
                }
                return _Property_Id;
            }
        }
        internal static System.Reflection.PropertyInfo Property_Name
        {
            get
            {
                if (_Property_Name == null)
                {
                    _Property_Name =
                        ModelType.GetProperty("Name")
                            ?? throw new InvalidOperationException("Could not find property 'Name' on Test2Model");
                }
                return _Property_Name;
            }
        }
        internal static System.Reflection.PropertyInfo Property_ComplexObj
        {
            get
            {
                if (_Property_ComplexObj == null)
                {
                    _Property_ComplexObj =
                        ModelType.GetProperty("ComplexObj")
                            ?? throw new InvalidOperationException("Could not find property 'ComplexObj' on Test2Model");
                }
                return _Property_ComplexObj;
            }
        }
        /// <summary>Property <code>Id</code> is <see cref="long"/>.</summary>
        internal static Type Type_Id { get; } = typeof(long);
        internal static bool Type_Id_IsNullable { get; } = false;
        /// <summary>Property <code>Name</code> is <see cref="string"/>.</summary>
        internal static Type Type_Name { get; } = typeof(string);
        internal static bool Type_Name_IsNullable { get; } = false;
        /// <summary>Property <code>ComplexObj</code> is <see cref="Test1Model"/>.</summary>
        internal static Type Type_ComplexObj { get; } = typeof(Test1Model);
        internal static bool Type_ComplexObj_IsNullable { get; } = true;
    }
    // CSharpCodeDictionaryMappingMethods
    public static class Test2ModelDictionaryMappingExtensions
    {
        public static void PopulateFromDictionary(this Test2Model instance, IDictionary<string, object?> dictionary)
        {
            // Id
            if (dictionary.TryGetValue("Id", out var Id_AsObj))
            {
#if DEBUG
                if (Id_AsObj is not null)
                {
                    var type = Id_AsObj.GetType();
                    var value = Id_AsObj;
                    System.Diagnostics.Debug.Assert(
                        Test2ModelMeta.Property_Id.PropertyType.IsAssignableFrom(type),
                        $"dictionary['Id'] of type '{type.FullName}' (Value: {value}) is not assignable to Test2Model.Id");
                }
#endif
                if (Id_AsObj is not null)
                {
                    // instance.Id = (long)Id_AsObj;
                    Test2ModelMeta.Property_Id.SetValue(instance, (long)Id_AsObj);
                }
                else throw new ArgumentException("The value for the key 'Id' in the supplied dictionary is null", nameof(dictionary));
            }
            else throw new KeyNotFoundException("The key 'Id' was not present in the supplied dictionary");
            // Name
            if (dictionary.TryGetValue("Name", out var Name_AsObj))
            {
#if DEBUG
                if (Name_AsObj is not null)
                {
                    var type = Name_AsObj.GetType();
                    var value = Name_AsObj;
                    System.Diagnostics.Debug.Assert(
                        Test2ModelMeta.Property_Name.PropertyType.IsAssignableFrom(type),
                        $"dictionary['Name'] of type '{type.FullName}' (Value: {value}) is not assignable to Test2Model.Name");
                }
#endif
                if (Name_AsObj is not null)
                {
                    // instance.Name = (string)Name_AsObj;
                    Test2ModelMeta.Property_Name.SetValue(instance, (string)Name_AsObj);
                }
                else throw new ArgumentException("The value for the key 'Name' in the supplied dictionary is null", nameof(dictionary));
            }
            else throw new KeyNotFoundException("The key 'Name' was not present in the supplied dictionary");
            // ComplexObj
            if (dictionary.TryGetValue("ComplexObj", out var ComplexObj_AsObj))
            {
#if DEBUG
                if (ComplexObj_AsObj is not null)
                {
                    var type = ComplexObj_AsObj.GetType();
                    var value = ComplexObj_AsObj;
                    System.Diagnostics.Debug.Assert(
                        Test2ModelMeta.Property_ComplexObj.PropertyType.IsAssignableFrom(type),
                        $"dictionary['ComplexObj'] of type '{type.FullName}' (Value: {value}) is not assignable to Test2Model.ComplexObj");
                }
#endif
                // instance.ComplexObj = (Test1Model?)ComplexObj_AsObj;
                Test2ModelMeta.Property_ComplexObj.SetValue(instance, (Test1Model?)ComplexObj_AsObj);
            }
            else instance.ComplexObj = default;
        }
        public static Dictionary<string, object?> ToDictionary(this Test2Model instance)
        {
            var dictionary = new Dictionary<string, object?>
            {
                ["Id"] = instance.Id,
                ["Name"] = instance.Name,
                ["ComplexObj"] = instance.ComplexObj,
            };
            return dictionary;
        }
    }
    // CSharpCodeDtoTypeAndExtensions
    public record Test2ModelDto
    {
        public long? Id { get; set; }
        public string? Name { get; set; }
        public Test1Model? ComplexObj { get; set; }
    }
    public static class Test2ModelDtoMappingExtensions
    {
        public static Test2ModelDto ToDto(this Test2Model instance)
        {
            var result = new Test2ModelDto();
            result.Id = instance.Id;
            result.Name = instance.Name;
            result.ComplexObj = instance.ComplexObj;
            return result;
        }
        public static Test2Model ToModel(this Test2ModelDto dto)
        {
            var obj = RuntimeHelpers.GetUninitializedObject(
                Test2ModelMeta.ModelType);
            var result = (Test2Model)obj;
            // result.Id = dto.Id;
            Test2ModelMeta.Property_Id.SetValue(result, dto.Id);
            // result.Name = dto.Name;
            Test2ModelMeta.Property_Name.SetValue(result, dto.Name);
            // result.ComplexObj = dto.ComplexObj;
            Test2ModelMeta.Property_ComplexObj.SetValue(result, dto.ComplexObj);
            return result;
        }
    }
    public static class Test2ModelExtensions
    {
        public static IEnumerable<(Test2ModelProperty Property, object? Value)> Enumerate(this Test2Model model)
        {
            yield return (Test2ModelProperty.Id, model.Id);
            yield return (Test2ModelProperty.Name, model.Name);
            yield return (Test2ModelProperty.ComplexObj, model.ComplexObj);
        }
    }
}

